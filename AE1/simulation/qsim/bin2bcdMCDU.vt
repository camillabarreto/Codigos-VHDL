// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/24/2019 20:52:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    bin2bcdMCDU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module bin2bcdMCDU_vlg_sample_tst(
	X_bin,
	sampler_tx
);
input [13:0] X_bin;
output sampler_tx;

reg sample;
time current_time;
always @(X_bin)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module bin2bcdMCDU_vlg_check_tst (
	C_bcd,
	D_bcd,
	M_bcd,
	U_bcd,
	sampler_rx
);
input [3:0] C_bcd;
input [3:0] D_bcd;
input [3:0] M_bcd;
input [3:0] U_bcd;
input sampler_rx;

reg [3:0] C_bcd_expected;
reg [3:0] D_bcd_expected;
reg [3:0] M_bcd_expected;
reg [3:0] U_bcd_expected;

reg [3:0] C_bcd_prev;
reg [3:0] D_bcd_prev;
reg [3:0] M_bcd_prev;
reg [3:0] U_bcd_prev;

reg [3:0] C_bcd_expected_prev;
reg [3:0] D_bcd_expected_prev;
reg [3:0] M_bcd_expected_prev;
reg [3:0] U_bcd_expected_prev;

reg [3:0] last_C_bcd_exp;
reg [3:0] last_D_bcd_exp;
reg [3:0] last_M_bcd_exp;
reg [3:0] last_U_bcd_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	C_bcd_prev = C_bcd;
	D_bcd_prev = D_bcd;
	M_bcd_prev = M_bcd;
	U_bcd_prev = U_bcd;
end

// update expected /o prevs

always @(trigger)
begin
	C_bcd_expected_prev = C_bcd_expected;
	D_bcd_expected_prev = D_bcd_expected;
	M_bcd_expected_prev = M_bcd_expected;
	U_bcd_expected_prev = U_bcd_expected;
end


// expected M_bcd[ 3 ]
initial
begin
	M_bcd_expected[3] = 1'bX;
end 
// expected M_bcd[ 2 ]
initial
begin
	M_bcd_expected[2] = 1'bX;
end 
// expected M_bcd[ 1 ]
initial
begin
	M_bcd_expected[1] = 1'bX;
end 
// expected M_bcd[ 0 ]
initial
begin
	M_bcd_expected[0] = 1'bX;
end 
// expected C_bcd[ 3 ]
initial
begin
	C_bcd_expected[3] = 1'bX;
end 
// expected C_bcd[ 2 ]
initial
begin
	C_bcd_expected[2] = 1'bX;
end 
// expected C_bcd[ 1 ]
initial
begin
	C_bcd_expected[1] = 1'bX;
end 
// expected C_bcd[ 0 ]
initial
begin
	C_bcd_expected[0] = 1'bX;
end 
// expected D_bcd[ 3 ]
initial
begin
	D_bcd_expected[3] = 1'bX;
end 
// expected D_bcd[ 2 ]
initial
begin
	D_bcd_expected[2] = 1'bX;
end 
// expected D_bcd[ 1 ]
initial
begin
	D_bcd_expected[1] = 1'bX;
end 
// expected D_bcd[ 0 ]
initial
begin
	D_bcd_expected[0] = 1'bX;
end 
// expected U_bcd[ 3 ]
initial
begin
	U_bcd_expected[3] = 1'bX;
end 
// expected U_bcd[ 2 ]
initial
begin
	U_bcd_expected[2] = 1'bX;
end 
// expected U_bcd[ 1 ]
initial
begin
	U_bcd_expected[1] = 1'bX;
end 
// expected U_bcd[ 0 ]
initial
begin
	U_bcd_expected[0] = 1'bX;
end 
// generate trigger
always @(C_bcd_expected or C_bcd or D_bcd_expected or D_bcd or M_bcd_expected or M_bcd or U_bcd_expected or U_bcd)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C_bcd = %b | expected D_bcd = %b | expected M_bcd = %b | expected U_bcd = %b | ",C_bcd_expected_prev,D_bcd_expected_prev,M_bcd_expected_prev,U_bcd_expected_prev);
	$display("| real C_bcd = %b | real D_bcd = %b | real M_bcd = %b | real U_bcd = %b | ",C_bcd_prev,D_bcd_prev,M_bcd_prev,U_bcd_prev);
`endif
	if (
		( C_bcd_expected_prev[0] !== 1'bx ) && ( C_bcd_prev[0] !== C_bcd_expected_prev[0] )
		&& ((C_bcd_expected_prev[0] !== last_C_bcd_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_bcd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_bcd_expected_prev);
		$display ("     Real value = %b", C_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_bcd_exp[0] = C_bcd_expected_prev[0];
	end
	if (
		( C_bcd_expected_prev[1] !== 1'bx ) && ( C_bcd_prev[1] !== C_bcd_expected_prev[1] )
		&& ((C_bcd_expected_prev[1] !== last_C_bcd_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_bcd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_bcd_expected_prev);
		$display ("     Real value = %b", C_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_bcd_exp[1] = C_bcd_expected_prev[1];
	end
	if (
		( C_bcd_expected_prev[2] !== 1'bx ) && ( C_bcd_prev[2] !== C_bcd_expected_prev[2] )
		&& ((C_bcd_expected_prev[2] !== last_C_bcd_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_bcd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_bcd_expected_prev);
		$display ("     Real value = %b", C_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_bcd_exp[2] = C_bcd_expected_prev[2];
	end
	if (
		( C_bcd_expected_prev[3] !== 1'bx ) && ( C_bcd_prev[3] !== C_bcd_expected_prev[3] )
		&& ((C_bcd_expected_prev[3] !== last_C_bcd_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_bcd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_bcd_expected_prev);
		$display ("     Real value = %b", C_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_bcd_exp[3] = C_bcd_expected_prev[3];
	end
	if (
		( D_bcd_expected_prev[0] !== 1'bx ) && ( D_bcd_prev[0] !== D_bcd_expected_prev[0] )
		&& ((D_bcd_expected_prev[0] !== last_D_bcd_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_bcd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_bcd_expected_prev);
		$display ("     Real value = %b", D_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_bcd_exp[0] = D_bcd_expected_prev[0];
	end
	if (
		( D_bcd_expected_prev[1] !== 1'bx ) && ( D_bcd_prev[1] !== D_bcd_expected_prev[1] )
		&& ((D_bcd_expected_prev[1] !== last_D_bcd_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_bcd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_bcd_expected_prev);
		$display ("     Real value = %b", D_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_bcd_exp[1] = D_bcd_expected_prev[1];
	end
	if (
		( D_bcd_expected_prev[2] !== 1'bx ) && ( D_bcd_prev[2] !== D_bcd_expected_prev[2] )
		&& ((D_bcd_expected_prev[2] !== last_D_bcd_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_bcd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_bcd_expected_prev);
		$display ("     Real value = %b", D_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_bcd_exp[2] = D_bcd_expected_prev[2];
	end
	if (
		( D_bcd_expected_prev[3] !== 1'bx ) && ( D_bcd_prev[3] !== D_bcd_expected_prev[3] )
		&& ((D_bcd_expected_prev[3] !== last_D_bcd_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_bcd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_bcd_expected_prev);
		$display ("     Real value = %b", D_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_bcd_exp[3] = D_bcd_expected_prev[3];
	end
	if (
		( M_bcd_expected_prev[0] !== 1'bx ) && ( M_bcd_prev[0] !== M_bcd_expected_prev[0] )
		&& ((M_bcd_expected_prev[0] !== last_M_bcd_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_bcd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_bcd_expected_prev);
		$display ("     Real value = %b", M_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_M_bcd_exp[0] = M_bcd_expected_prev[0];
	end
	if (
		( M_bcd_expected_prev[1] !== 1'bx ) && ( M_bcd_prev[1] !== M_bcd_expected_prev[1] )
		&& ((M_bcd_expected_prev[1] !== last_M_bcd_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_bcd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_bcd_expected_prev);
		$display ("     Real value = %b", M_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_M_bcd_exp[1] = M_bcd_expected_prev[1];
	end
	if (
		( M_bcd_expected_prev[2] !== 1'bx ) && ( M_bcd_prev[2] !== M_bcd_expected_prev[2] )
		&& ((M_bcd_expected_prev[2] !== last_M_bcd_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_bcd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_bcd_expected_prev);
		$display ("     Real value = %b", M_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_M_bcd_exp[2] = M_bcd_expected_prev[2];
	end
	if (
		( M_bcd_expected_prev[3] !== 1'bx ) && ( M_bcd_prev[3] !== M_bcd_expected_prev[3] )
		&& ((M_bcd_expected_prev[3] !== last_M_bcd_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_bcd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_bcd_expected_prev);
		$display ("     Real value = %b", M_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_M_bcd_exp[3] = M_bcd_expected_prev[3];
	end
	if (
		( U_bcd_expected_prev[0] !== 1'bx ) && ( U_bcd_prev[0] !== U_bcd_expected_prev[0] )
		&& ((U_bcd_expected_prev[0] !== last_U_bcd_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U_bcd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U_bcd_expected_prev);
		$display ("     Real value = %b", U_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_U_bcd_exp[0] = U_bcd_expected_prev[0];
	end
	if (
		( U_bcd_expected_prev[1] !== 1'bx ) && ( U_bcd_prev[1] !== U_bcd_expected_prev[1] )
		&& ((U_bcd_expected_prev[1] !== last_U_bcd_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U_bcd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U_bcd_expected_prev);
		$display ("     Real value = %b", U_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_U_bcd_exp[1] = U_bcd_expected_prev[1];
	end
	if (
		( U_bcd_expected_prev[2] !== 1'bx ) && ( U_bcd_prev[2] !== U_bcd_expected_prev[2] )
		&& ((U_bcd_expected_prev[2] !== last_U_bcd_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U_bcd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U_bcd_expected_prev);
		$display ("     Real value = %b", U_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_U_bcd_exp[2] = U_bcd_expected_prev[2];
	end
	if (
		( U_bcd_expected_prev[3] !== 1'bx ) && ( U_bcd_prev[3] !== U_bcd_expected_prev[3] )
		&& ((U_bcd_expected_prev[3] !== last_U_bcd_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port U_bcd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", U_bcd_expected_prev);
		$display ("     Real value = %b", U_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_U_bcd_exp[3] = U_bcd_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module bin2bcdMCDU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [13:0] X_bin;
// wires                                               
wire [3:0] C_bcd;
wire [3:0] D_bcd;
wire [3:0] M_bcd;
wire [3:0] U_bcd;

wire sampler;                             

// assign statements (if any)                          
bin2bcdMCDU i1 (
// port map - connection between master ports and signals/registers   
	.C_bcd(C_bcd),
	.D_bcd(D_bcd),
	.M_bcd(M_bcd),
	.U_bcd(U_bcd),
	.X_bin(X_bin)
);
// X_bin[ 13 ]
initial
begin
	X_bin[13] = 1'b0;
end 
// X_bin[ 12 ]
initial
begin
	X_bin[12] = 1'b0;
end 
// X_bin[ 11 ]
initial
begin
	X_bin[11] = 1'b0;
end 
// X_bin[ 10 ]
initial
begin
	X_bin[10] = 1'b1;
end 
// X_bin[ 9 ]
initial
begin
	X_bin[9] = 1'b0;
end 
// X_bin[ 8 ]
initial
begin
	X_bin[8] = 1'b0;
end 
// X_bin[ 7 ]
initial
begin
	X_bin[7] = 1'b1;
end 
// X_bin[ 6 ]
initial
begin
	X_bin[6] = 1'b1;
end 
// X_bin[ 5 ]
initial
begin
	X_bin[5] = 1'b0;
end 
// X_bin[ 4 ]
initial
begin
	X_bin[4] = 1'b1;
end 
// X_bin[ 3 ]
initial
begin
	X_bin[3] = 1'b0;
end 
// X_bin[ 2 ]
initial
begin
	X_bin[2] = 1'b0;
end 
// X_bin[ 1 ]
initial
begin
	X_bin[1] = 1'b1;
end 
// X_bin[ 0 ]
initial
begin
	X_bin[0] = 1'b0;
end 

bin2bcdMCDU_vlg_sample_tst tb_sample (
	.X_bin(X_bin),
	.sampler_tx(sampler)
);

bin2bcdMCDU_vlg_check_tst tb_out(
	.C_bcd(C_bcd),
	.D_bcd(D_bcd),
	.M_bcd(M_bcd),
	.U_bcd(U_bcd),
	.sampler_rx(sampler)
);
endmodule

